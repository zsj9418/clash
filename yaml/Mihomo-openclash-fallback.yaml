# --- 节点订阅 ---
proxy-providers:
  鱼哥合集:
    type: http
    interval: 43200
    health-check: {enable: true, url: 'https://www.apple.com/library/test/success.html', interval: 180}
    filter: '^(?!.*(拒绝|直连|群|邀请|返利|循环|官网|客服|网站|网址|获取|订阅|流量|到期|机场|下次|版本|官址|备用|过期|已用|联系|邮箱|工单|贩卖|通知|倒卖|防止|国内|地址|频道|无法|说明|提示|特别|访问|支持|教程|关注|更新|作者|加入|USE|USED|TOTAL|EXPIRE|EMAIL|Panel|Channel|Author|traffic))'
    proxy: "直连" 
    url: "http" # 请替换为您的真实订阅
    path: ./providers/鱼哥合集.yaml
    override: {additional-prefix: '[🛫鱼哥合集]', skip-cert-verify: true, udp: true}
  网络合集:
    type: http
    interval: 43200
    health-check: {enable: true, url: 'https://www.apple.com/library/test/success.html', interval: 180}
    filter: '^(?!.*(拒绝|直连|群|邀请|返利|循环|官网|客服|网站|网址|获取|订阅|流量|到期|机场|下次|版本|官址|备用|过期|已用|联系|邮箱|工单|贩卖|通知|倒卖|防止|国内|地址|频道|无法|说明|提示|特别|访问|支持|教程|关注|更新|作者|加入|USE|USED|TOTAL|EXPIRE|EMAIL|Panel|Channel|Author|traffic))'
    proxy: "直连"
    url: "http" # 请替换为您的真实订阅
    path: ./providers/网络合集.yaml
    override: {additional-prefix: '[🛫网络合集]', skip-cert-verify: true, udp: true}
  自建合集:
    type: http
    interval: 43200
    health-check: {enable: true, url: 'https://www.apple.com/library/test/success.html', interval: 180}
    filter: '^(?!.*(拒绝|直连|群|邀请|返利|循环|官网|客服|网站|网址|获取|订阅|流量|到期|机场|下次|版本|官址|备用|过期|已用|联系|邮箱|工单|贩卖|通知|倒卖|防止|国内|地址|频道|无法|说明|提示|特别|访问|支持|教程|关注|更新|作者|加入|USE|USED|TOTAL|EXPIRE|EMAIL|Panel|Channel|Author|traffic))'
    proxy: "直连"
    url: "http" # 请替换为您的真实订阅
    path: ./providers/自建合集.yaml
    override: {additional-prefix: '[🛫自建合集]', skip-cert-verify: true, udp: true} 

proxies:
  - {name: 直连, type: direct}
  - {name: 拒绝, type: reject}

# --- 基础设置 ---
mixed-port: 7890
allow-lan: true
mode: rule
log-level: info
ipv6: true

# --- 外部控制 ---
external-controller: 0.0.0.0:9090
secret: ""
external-ui: ./ui
external-ui-url: https://gh-proxy.com/github.com/Zephyruso/zashboard/archive/refs/heads/gh-pages.zip

dns:
  enable: true
  listen: 0.0.0.0:1053
  ipv6: true
  enhanced-mode: fake-ip
  fake-ip-range: 198.18.0.1/16
  prefer-h3: true
  respect-rules: true
  default-nameserver:
    - 223.5.5.5
    - 119.29.29.29
    - 8.8.8.8
  proxy-server-nameserver:
    - https://dns.google/dns-query
    - https://cloudflare-dns.com/dns-query
  fake-ip-filter:
    - '*.lan'
    - '*.local'
    - 'localhost'
    - 'Mijia Cloud'
    - 'geosite:cn'
    - 'geosite:private'
  nameserver-policy:
    'geosite:cn': [https://dns.alidns.com/dns-query, https://doh.pub/dns-query]
    'geosite:geolocation-!cn': [https://dns.google/dns-query, https://cloudflare-dns.com/dns-query]

tun:
  enable: true
  stack: system
  auto-route: true
  auto-detect-interface: true
  dns-hijack:
    - 'any:53'

profile:
  store-selected: true
  store-fake-ip: true

default: &default
  type: select
  # hidden: true 
  proxies:
    - 代理
    - 所有-自动
    - 所有-手动
    - 香港-故转
    - 台湾-故转
    - 日本-故转
    - 新加坡-故转
    - 韩国-故转
    - 美国-故转
    - 英国-故转
    - 其他-故转
    - 直连
    - 拒绝

proxy-groups:
  # ====================================================
  # 第一部分：UI 界面最顶部的核心控制组
  # ====================================================
  - name: 代理
    type: select
    proxies:
      - 所有-自动
      - 所有-手动
      - 香港-故转
      - 台湾-故转
      - 日本-故转
      - 新加坡-故转
      - 韩国-故转
      - 美国-故转
      - 英国-故转
      - 其他-故转
      - 直连
      - 拒绝

  # --- 各地区策略组 (手动/故障转移) ---
  - name: 所有-手动
    type: select
    include-all: true
    filter: "^((?!(直连|拒绝)).)*$"
   # hidden: true
   
  - name: 香港-故转
    type: fallback
    interval: 300
    lazy: false
    proxies: [香港-手动, 香港-自动]
  - name: 香港-手动
    type: select
    include-all: true
    filter: "(?=.*(广港|香港|HK|Hong Kong|🇭🇰|HongKong)).*$"
 
  - name: 台湾-故转
    type: fallback
    interval: 300
    lazy: false
    proxies: [台湾-手动, 台湾-自动]
  - name: 台湾-手动
    type: select
    include-all: true
    filter: "(?=.*(广台|台湾|台灣|TW|Tai Wan|🇹🇼|TaiWan|Taiwan)).*$"

  - name: 日本-故转
    type: fallback
    interval: 300
    lazy: false
    proxies: [日本-手动, 日本-自动]
  - name: 日本-手动
    type: select
    include-all: true
    filter: "(?=.*(广日|日本|JP|川日|东京|大阪|泉日|埼玉|沪日|深日|🇯🇵|Japan)).*$"

  - name: 新加坡-故转
    type: fallback
    interval: 300
    lazy: false
    proxies: [新加坡-手动, 新加坡-自动]
  - name: 新加坡-手动
    type: select
    include-all: true
    filter: "(?=.*(广新|新加坡|SG|坡|狮城|🇸🇬|Singapore)).*$"

  - name: 韩国-故转
    type: fallback
    interval: 300
    lazy: false
    proxies: [韩国-手动, 韩国-自动]
  - name: 韩国-手动
    type: select
    include-all: true
    filter: "(?=.*(广韩|韩国|韓國|KR|首尔|春川|🇰🇷|Korea)).*$"

  - name: 美国-故转
    type: fallback
    interval: 300
    lazy: false
    proxies: [美国-手动, 美国-自动]
  - name: 美国-手动
    type: select
    include-all: true
    filter: "(?=.*(广美|US|美国|纽约|波特兰|达拉斯|俄勒|凤凰城|费利蒙|洛杉|圣何塞|圣克拉|西雅|芝加|🇺🇸|United States)).*$"

  - name: 英国-故转
    type: fallback
    interval: 300
    lazy: false
    proxies: [英国-手动, 英国-自动]
  - name: 英国-手动
    type: select
    include-all: true
    filter: "(?=.*(英国|英|伦敦|UK|United Kingdom|🇬🇧|London)).*$"

  - name: 其他-故转
    type: fallback
    interval: 300
    lazy: false
    proxies: [其他-手动, 其他-自动]
  - name: 其他-手动
    type: select
    include-all: true
    filter: "^((?!(直连|拒绝|广港|香港|HK|Hong Kong|🇭🇰|HongKong|广台|台湾|台灣|TW|Tai Wan|🇹🇼|TaiWan|Taiwan|广日|日本|JP|川日|东京|大阪|泉日|埼玉|沪日|深日|🇯🇵|Japan|广新|新加坡|SG|坡|狮城|🇸🇬|Singapore|广韩|韩国|韓國|KR|首尔|春川|🇰🇷|Korea|广美|US|美国|纽约|波特兰|达拉斯|俄勒|凤凰城|费利蒙|洛杉|圣何塞|圣克拉|西雅|芝加|🇺🇸|United States|英国|UK|United Kingdom|伦敦|英|London|🇬🇧)).)*$"

  # ====================================================
  # 第二部分：UI 界面中部的业务分流组
  # ====================================================
  - {name: ChatGPT, <<: *default}
  - {name: Gemini, <<: *default}
  - {name: Copilot, <<: *default}
  - {name: Perplexity, <<: *default}
  - {name: Claude, <<: *default}
  - {name: MetaAI, <<: *default}
  - {name: Grok, <<: *default}
  - {name: Groq, <<: *default}
  - {name: GitHub, <<: *default}
  - {name: Reddit, <<: *default}
  - {name: Telegram, <<: *default}
  - {name: WhatsApp, <<: *default}
  - {name: Facebook, <<: *default}
  - {name: BiliBili, <<: *default}
  - {name: YouTube, <<: *default}
  - {name: TikTok, <<: *default}
  - {name: Netflix, <<: *default}
  - {name: HBO, <<: *default}
  - {name: Disney, <<: *default}
  - {name: Amazon, <<: *default}
  - {name: Crunchyroll, <<: *default}
  - {name: Popcorn, <<: *default}
  - {name: Spotify, <<: *default}
  - {name: Nvidia, <<: *default}
  - {name: Steam, <<: *default}
  - {name: Games, <<: *default}
  - {name: Crypto, <<: *default}
  - {name: Apple, <<: *default}
  - {name: Google, <<: *default}
  - {name: Microsoft, <<: *default}
  - {name: Test, <<: *default}
  - {name: Block, type: select, proxies: [拒绝, 直连]}
  - {name: 国外, <<: *default}
  - {name: 国内, type: select, proxies: [直连, 拒绝]}
  - {name: 其他, <<: *default}

  # ====================================================
  # 第三部分：在后台工作并隐藏的组件
  # ====================================================

  - name: 所有-自动
    type: url-test
    include-all: true
    tolerance: 50
    interval: 300
    filter: "^((?!(直连|拒绝)).)*$"
    hidden: true

  - name: 香港-自动
    type: url-test
    include-all: true
    tolerance: 50
    interval: 300
    filter: "(?=.*(广港|香港|HK|Hong Kong|🇭🇰|HongKong)).*$"
    hidden: true
 
  - name: 台湾-自动
    type: url-test
    include-all: true
    tolerance: 50
    interval: 300
    filter: "(?=.*(广台|台湾|台灣|TW|Tai Wan|🇹🇼|TaiWan|Taiwan)).*$"
    hidden: true

  - name: 日本-自动
    type: url-test
    include-all: true
    tolerance: 50
    interval: 300
    filter: "(?=.*(广日|日本|JP|川日|东京|大阪|泉日|埼玉|沪日|深日|🇯🇵|Japan)).*$"
    hidden: true

  - name: 新加坡-自动
    type: url-test
    include-all: true
    tolerance: 50
    interval: 300
    filter: "(?=.*(广新|新加坡|SG|坡|狮城|🇸🇬|Singapore)).*$"
    hidden: true

  - name: 韩国-自动
    type: url-test
    include-all: true
    tolerance: 50
    interval: 300
    filter: "(?=.*(广韩|韩国|韓國|KR|首尔|春川|🇰🇷|Korea)).*$"
    hidden: true

  - name: 美国-自动
    type: url-test
    include-all: true
    tolerance: 50
    interval: 300
    filter: "(?=.*(广美|US|美国|纽约|波特兰|达拉斯|俄勒|凤凰城|费利蒙|洛杉|圣何塞|圣克拉|西雅|芝加|🇺🇸|United States)).*$"
    hidden: true

  - name: 英国-自动
    type: url-test
    include-all: true
    tolerance: 50
    interval: 300
    filter: "(?=.*(英国|英|伦敦|UK|United Kingdom|🇬🇧|London)).*$"
    hidden: true

  - name: 其他-自动
    type: url-test
    include-all: true
    tolerance: 50
    interval: 300
    filter: "^((?!(直连|拒绝|广港|香港|HK|Hong Kong|🇭🇰|HongKong|广台|台湾|台灣|TW|Tai Wan|🇹🇼|TaiWan|Taiwan|广日|日本|JP|川日|东京|大阪|泉日|埼玉|沪日|深日|🇯🇵|Japan|广新|新加坡|SG|坡|狮城|🇸🇬|Singapore|广韩|韩国|韓國|KR|首尔|春川|🇰🇷|Korea|广美|US|美国|纽约|波特兰|达拉斯|俄勒|凤凰城|费利蒙|洛杉|圣何塞|圣克拉|西雅|芝加|🇺🇸|United States|英国|UK|United Kingdom|伦敦|英|London|🇬🇧)).)*$"
    hidden: true
# --- 规则列表 ---
rules:
  - IP-CIDR,127.0.0.0/8,直连,no-resolve
  - IP-CIDR,10.0.0.0/8,直连,no-resolve
  - IP-CIDR,172.16.0.0/12,直连,no-resolve
  - IP-CIDR,192.168.0.0/16,直连,no-resolve
  - IP-CIDR,198.18.0.1/16,直连,no-resolve 
  - RULE-SET,PrivateDomain,直连
  - RULE-SET,ChinaIP,直连,no-resolve
  - RULE-SET,TestDomain,Test
  - RULE-SET,BlockDomain,Block  
  - RULE-SET,ChatGPTDomain,ChatGPT
  - RULE-SET,ClaudeDomain,Claude
  - RULE-SET,MetaAIDomain,MetaAI
  - RULE-SET,PerplexityDomain,Perplexity
  - RULE-SET,CopilotDomain,Copilot
  - RULE-SET,GeminiDomain,Gemini
  - RULE-SET,GroqDomain,Groq
  - RULE-SET,GrokDomain,Grok
  - RULE-SET,RedditDomain,Reddit 
  - RULE-SET,GitHubDomain,GitHub
  - RULE-SET,TelegramDomain,Telegram
  - RULE-SET,TelegramIP,Telegram,no-resolve
  - RULE-SET,WhatsAppDomain,WhatsApp
  - RULE-SET,FacebookDomain,Facebook
  - RULE-SET,AppleDomain,Apple
  - RULE-SET,AppleCNDomain,Apple  
  - RULE-SET,AppleCustomeDomain,Apple  
  - RULE-SET,MicrosoftDomain,Microsoft
  - RULE-SET,OKXDomain,Crypto
  - RULE-SET,BybitDomain,Crypto
  - RULE-SET,BinanceDomain,Crypto
  - RULE-SET,BiliBiliDomain,BiliBili
  - RULE-SET,YoutubeDomain,YouTube
  - RULE-SET,TikTokDomain,TikTok
  - RULE-SET,NetflixDomain,Netflix
  - RULE-SET,NetflixIP,Netflix,no-resolve
  - RULE-SET,DisneyDomain,Disney
  - RULE-SET,AmazonDomain,Amazon
  - RULE-SET,CrunchyrollDomain,Crunchyroll
  - RULE-SET,PopcornDomain,Popcorn 
  - RULE-SET,HBODomain,HBO
  - RULE-SET,SpotifyDomain,Spotify
  - RULE-SET,SteamDomain,Steam
  - RULE-SET,EpicDomain,Games
  - RULE-SET,EADomain,Games
  - RULE-SET,BlizzardDomain,Games
  - RULE-SET,UBIDomain,Games
  - RULE-SET,PlayStationDomain,Games
  - RULE-SET,NintendDomain,Games
  - RULE-SET,GoogleDomain,Google
  - RULE-SET,GoogleIP,Google,no-resolve
  - RULE-SET,NvidiaDomain,Nvidia 
  - RULE-SET,DirectDomain,国内
  - RULE-SET,ChinaDomain,国内
  - RULE-SET,ProxyDomain,国外
  - RULE-SET,GlobeDomain,国外  
  - RULE-SET,GateFireWallDomain,国外
  - MATCH,其他

# --- 规则集提供者 ---
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}

rule-providers:
  TestDomain: {<<: *class, url: "https://gh-proxy.com/raw.githubusercontent.com/liandu2024/clash/refs/heads/main/list/Check.list"}
  BlockDomain: {<<: *class, url: "https://gh-proxy.com/raw.githubusercontent.com/liandu2024/clash/refs/heads/main/list/Block.list"}
  ChatGPTDomain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/openai.mrs"}
  ClaudeDomain: {<<: *class, url: "https://gh-proxy.com/raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Claude/Claude.list"}
  MetaAIDomain: {<<: *class, url: "https://gh-proxy.com/raw.githubusercontent.com/liandu2024/clash/refs/heads/main/list/MetaAi.list"}
  PerplexityDomain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/perplexity.mrs"}
  CopilotDomain: {<<: *class, url: "https://gh-proxy.com/raw.githubusercontent.com/liandu2024/clash/refs/heads/main/list/Copilot.list"}
  GeminiDomain: {<<: *class, url: "https://gh-proxy.com/raw.githubusercontent.com/liandu2024/clash/refs/heads/main/list/Gemini.list"}
  GitHubDomain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/github.mrs"}
  TelegramDomain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/telegram.mrs"}  
  TelegramIP: {<<: *ip, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geoip/telegram.mrs"}
  TwitterDomain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/x.mrs"}
  WhatsAppDomain: {<<: *class, url: "https://gh-proxy.com/raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Whatsapp/Whatsapp.list"}
  FacebookDomain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/facebook.mrs"}
  AmazonDomain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/amazon.mrs"}
  AppleCNDomain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/apple-cn.mrs"}
  AppleDomain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/apple.mrs"} 
  AppleCustomeDomain: {<<: *class, url: "https://gh-proxy.com/raw.githubusercontent.com/liandu2024/clash/refs/heads/main/list/Apple.list"}
  MicrosoftDomain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/microsoft.mrs"}
  OKXDomain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/okx.mrs"}
  BybitDomain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/bybit.mrs"}
  BinanceDomain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/binance.mrs"}
  TikTokDomain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/tiktok.mrs"}
  NetflixDomain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/netflix.mrs"}
  NetflixIP: {<<: *ip, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geoip/netflix.mrs"}
  DisneyDomain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/disney.mrs"}
  HBODomain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/hbo.mrs"}
  SpotifyDomain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/spotify.mrs"}
  SteamDomain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/steam.mrs"}
  EpicDomain: {<<: *class, url: "https://gh-proxy.com/raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Epic/Epic.list"}
  EADomain: {<<: *class, url: "https://gh-proxy.com/raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/EA/EA.list"}
  BlizzardDomain: {<<: *class, url: "https://gh-proxy.com/raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Blizzard/Blizzard.list"}
  UBIDomain: {<<: *class, url: "https://gh-proxy.com/raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/UBI/UBI.list"}
  PlayStationDomain: {<<: *class, url: "https://gh-proxy.com/raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/PlayStation/PlayStation.list"}
  NintendDomain: {<<: *class, url: "https://gh-proxy.com/raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Nintendo/Nintendo.list"}
  ProxyDomain: {<<: *class, url: "https://gh-proxy.com/raw.githubusercontent.com/liandu2024/clash/refs/heads/main/list/Proxy.list"}
  GlobeDomain: {<<: *class, url: "https://gh-proxy.com/raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Global/Global.list"} 
  NvidiaDomain: {<<: *class, url: "https://gh-proxy.com/raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Nvidia/Nvidia.list"}
  CrunchyrollDomain: {<<: *class, url: "https://gh-proxy.com/raw.githubusercontent.com/liandu2024/clash/refs/heads/main/list/Crunchyroll.list"}
  RedditDomain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/reddit.mrs"}
  GroqDomain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/groq.mrs"}
  GrokDomain: {<<: *class, url: "https://gh-proxy.com/raw.githubusercontent.com/liandu2024/clash/refs/heads/main/list/Grok.list"}
  PopcornDomain: {<<: *class, url: "https://gh-proxy.com/raw.githubusercontent.com/liandu2024/clash/refs/heads/main/list/Popcorn.list"}
  DirectDomain: {<<: *class, url: "https://gh-proxy.com/raw.githubusercontent.com/liandu2024/clash/refs/heads/main/list/Direct.list"}
  PrivateDomain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/private.mrs"}
  ChinaDomain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/cn.mrs"}
  ChinaIP: {<<: *ip, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geoip/cn.mrs"}
  YoutubeDomain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/youtube.mrs"}  
  GoogleDomain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/google.mrs"}  
  GoogleIP: {<<: *ip, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geoip/google.mrs"}
  BiliBiliDomain: {<<: *domain,  url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/bilibili.mrs"}
  GateFireWallDomain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/gfw.mrs"}
